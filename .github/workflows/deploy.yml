# This is a basic workflow to help you get started with Actions

name: Deploy to ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: whatsapp_bot
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:
      # - name: Create SSH key
      #   run: |
      #     mkdir -p ~/.ssh/
      #     echo "$SSH_PRIVATE_KEY" > ~/.ssh/private.key
      #     sudo chmod 600 ~/.ssh/private.key
      #     echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
      #     sudo chmod 600 ~/.ssh/known_hosts
      #   shell: bash
      #   env:
      #     SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}
      #     SSH_KNOWN_HOSTS: ${{secrets.KNOWN_HOSTS}}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      - name: SSH into EC2
        run: |
          echo 'Starting to Deploy...'
          
          ssh -tt $USERNAME@$HOST " 
            docker-update
          "

          echo 'Deployment completed successfully'
        env:
          USERNAME: ${{ secrets.AWS_EC2_USERNAME }}
          HOST: ${{ secrets.AWS_EC2_HOST }}
